#!/bin/bash

source /etc/os-release

get_kernel() {
    uname -r
}

get_shell() {
    echo "${SHELL##*/}"
}

get_packages() {
    case "$ID" in
        arch|manjaro|artix|garuda|archcraft|endeavouros)
            pacman -Qq | wc -l;;
        ubuntu|debian|pop)
            echo $(("$(dpkg -l | wc -l)" - 5));;
        fedora)
            rpm -qa | wc -l;;
        gentoo)
            ls -d /var/db/pkg/*/* | cut -f5- -d/ ;;
        void)
            xbps-query -l | wc -l;;
    esac
}

get_uptime() {
    if [[ -r /proc/uptime ]]; then
        s=$(< /proc/uptime)
        s=${s/.*}
    else
        boot=$(date -d"$(uptime -s)" +%s)
        now=$(date +%s)
        s=$((now - boot))
    fi

    d="$((s / 60 / 60 / 24))d"
    h="$((s / 60 / 60 % 24))h"
    m="$((s / 60 % 60))m"

    # Hide empty fields.
    [ ${d/ *} == 0d ] && unset d
    [ ${h/ *} == 0h ] && unset h
    [ ${m/ *} == 0s ] && unset m

    echo ${d:+$d }${h:+$h }$m
}

get_memory() {
    # MemUsed = Memtotal + Shmem - MemFree - Buffers - Cached - SReclaimable
    # Source: https://github.com/KittyKatt/screenFetch/issues/386#issuecomment-249312716
    while IFS=":" read -r a b; do
        case $a in
            "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
            "Shmem") ((mem_used+=${b/kB}))  ;;
            "MemFree" | "Buffers" | "Cached" | "SReclaimable")
                mem_used="$((mem_used-=${b/kB}))"
            ;;

            # Available since Linux 3.14rc (34e431b0ae398fc54ea69ff85ec700722c9da773).
            # If detected this will be used over the above calculation for mem_used.
            "MemAvailable")
                mem_avail=${b/kB}
            ;;
        esac
    done < /proc/meminfo

    if [[ $mem_avail ]]; then
        mem_used=$(((mem_total - mem_avail) / 1024))
    else
        mem_used="$((mem_used / 1024))"
    fi

    mem_total="$((mem_total / 1024))"
    echo "$mem_used | $mem_total MiB"
}

bold='\033[1m'
default='\033[0m'
red='\033[31m'
yellow='\033[33m'
green='\033[32m'
cyan='\033[36m'
blue='\033[34m'
magenta='\033[35m'
black='\033[30m'

icons=("" "" "󰌽" "󰌢" "" "" "󰏖" "󰍛")
keys=("user" "hostname" "distro" "kernel" "uptime" "shell" "packages" "memory")
colors=("$red" "$yellow" "$green" "$cyan" "$blue" "$magenta" "$red" "$yellow")
values=("$USER" "$HOSTNAME" "$PRETTY_NAME" "$(get_kernel)" "$(get_uptime)" "$(get_shell)" "$(get_packages)" "$(get_memory)")

printn() {
    for ((i=1; i <= $2; i++))
    do
        printf "$1"
    done
}

print_separator() {
    local n=$(($2+5))
    if [ "$1" = 0 ]; then
        printf '╭'
    elif [ "$1" = 1 ]; then    
        printf '├'
    else
        printf '╰'
    fi

    printn "─" "$n"

    if [ "$1" = 0 ]; then
        printf '╮'
    elif [ "$1" = 1 ]; then    
        printf '┤'
    else
        printf '╯'
    fi
    printf "\n"
}

get_table_length() {
    local maxlength=${#keys[0]}
    for key in "${keys[@]}"
    do
        maxlength=$(( maxlength > "${#key}" ? maxlength : "${#key}" ))
    done
    echo "$maxlength"
}

get_colors() {
    local colors=("$default" "$red" "$yellow" "$green" "$cyan" "$blue" "$magenta" "$black")
    local char=" "
    for color in "${colors[@]}"
    do
        printf "$color$char"
    done
    printf "$default"
}

print_logo() {
case "$ID" in
arch)
logo_color="$blue"
logo='
     ___           __
    / _ | ________/ /
   / __ |/ __/ __/ _ \
  /_/ |_/_/  \__/_//_/
';;
nixos)
logo_color="$cyan"
logo='
     _  ___      ____  ____
    / |/ (_)_ __/ __ \/ __/
   /    / /\ \ / /_/ /\ \  
  /_/|_/_//_\_\\____/___/ 
';;
void)
logo_color="$green"
logo='
   _   __     _    __
  | | / /__  (_)__/ /
  | |/ / _ \/ / _  / 
  |___/\___/_/\_,_/ 
';;
ubuntu)
logo_color="$red"
logo='
    __  ____             __
   / / / / /  __ _____  / /___ __
  / /_/ / _ \/ // / _ \/ __/ // /
  \____/_.__/\_,_/_//_/\__/\_,_/
';;
debian)
logo_color="$red"
logo='
     ___      __   _
    / _ \___ / /  (_)__ ____
   / // / -_) _ \/ / _ `/ _ \
  /____/\__/_.__/_/\_,_/_//_/
';;
fedora)
logo_color="$blue"
logo='
     ____       __
    / __/__ ___/ /__  _______ _
   / _// -_) _  / _ \/ __/ _ `/
  /_/  \__/\_,_/\___/_/  \_,_/
';;
linuxmint)
logo_color="$green"
logo='
     __  ____      __
    /  |/  (_)__  / /_
   / /|_/ / / _ \/ __/
  /_/  /_/_/_//_/\__/
';;
"Zorin OS")
logo_color="$blue"
logo='
   ____          _
  /_  /___  ____(_)__
   / // _ \/ __/ / _ \
  /___|___/_/ /_/_//_/
';;
pop)
logo_color="$cyan"
logo='
     ___            ____  ____
    / _ \___  ___  / __ \/ __/
   / ___/ _ \/ _ \/ /_/ /\ \
  /_/   \___/ .__/\____/___/
           /_/
';;
manjaro)
logo_color="$green"
logo='
     __  ___            _
    /  |/  /__ ____    (_)__ ________
   / /|_/ / _ `/ _ \  / / _ `/ __/ _ \
  /_/  /_/\_,_/_//_/_/ /\_,_/_/  \___/
                  |___/
';;
opensuse)
logo_color="$green"
logo='
                       ______  __________
   ___  ___  ___ ___  / __/ / / / __/ __/
  / _ \/ _ \/ -_) _ \_\ \/ /_/ /\ \/ _/
  \___/ .__/\__/_//_/___/\____/___/___/
     /_/
';;
slackware)
logo_color="$blue"
logo='
     ______         __
    / __/ /__ _____/ /___    _____ ________
   _\ \/ / _ `/ __/  '"'"'_/ |/|/ / _ `/ __/ -_)
  /___/_/\_,_/\__/_/\_\|__,__/\_,_/_/  \__/
';;
centos)
logo_color="$yellow"
logo='
    _____         __  ____  ____
   / ___/__ ___  / /_/ __ \/ __/
  / /__/ -_) _ \/ __/ /_/ /\ \
  \___/\__/_//_/\__/\____/___/
';;
redhat)
logo_color="$red"
logo='
     ___         ____ __     __
    / _ \___ ___/ / // /__ _/ /_
   / , _/ -_) _  / _  / _ `/ __/
  /_/|_|\__/\_,_/_//_/\_,_/\__/
';;
gentoo)
logo_color="$magenta"
logo='
    _____         __
   / ___/__ ___  / /____  ___
  / (_ / -_) _ \/ __/ _ \/ _ \
  \___/\__/_//_/\__/\___/\___/
';;
endeavouros)
logo_color="$magenta"
logo='
   ____        __                            ____  ____
  / __/__  ___/ /__ ___ __  _____  __ ______/ __ \/ __/
 / _// _ \/ _  / -_) _ `/ |/ / _ \/ // / __/ /_/ /\ \
/___/_//_/\_,_/\__/\_,_/|___/\___/\_,_/_/  \____/___/
';;
artix)
logo_color="$blue"
logo='
     ___        __  _ __  __
    / _ | ____ / /_(_)\ \/ /
   / __ |/ __// __/ /  >  < 
  /_/ |_/_/   \__/_/  /_/\_\
';;
esac
if [ -n "$logo" ]; then
    echo -en "$bold$logo_color$logo$default"
fi
}

print_fetch() {
    local padding=2
    local table_length=$(get_table_length)
    printf "\n"
    printn " " "$padding"
    print_separator 0 "$table_length"
    i=0
    for key in "${keys[@]}"
    do
        echo -e "  │ ${colors[$i]}${icons[$i]}  ${default}$(printf %-${table_length}s "$key") │ ${colors[$i]}${values[$i]}$default"
        i=$((i+1))
    done
    printn " " "$padding"; print_separator 1 "$table_length"
    echo -e "  │ 󰏘  $(printf %-${table_length}s "colors") │ $(get_colors)"
    printn " " "$padding"; print_separator 2 "$table_length"
    printf "\n"
}

print_logo
print_fetch

